#!/usr/bin/env python

import numpy as np
from supervillain.h5 import H5able
from supervillain.configurations import Configurations

import logging
logger = logging.getLogger(__name__)

class Villain(H5able):
    r'''
    'The' Villain action is just the straightforward

    .. math::
       \begin{align}
       Z[J] &= \sum\hspace{-1.33em}\int D\phi\; Dn\; e^{-S_J[\phi, n, v]}
       \\
       S_J[\phi, n, v] &= \frac{\kappa}{2} \sum_{\ell} (d\phi - 2\pi n)_\ell^2 + 2\pi i \sum_p \left(v/W + J/2\pi \right)_p (dn)_p
       \end{align}

    with $\phi$ a real-valued 0-form that lives on sites, $n$ an integer-valued one form that lives on links $l$, and $J$ a two-form that lives on plaquettes $p$.

    In this formulation, if $J$ is real and nonzero we expect a sign problem because the action is complex.  However, we can think of $J$ as an external source, take functional derivatives to get observables, and then set $J$ to zero so that we only need sample according to the first term.

    .. warning::
        Because $W\neq1$ suffers from a sign problem without a clever algorithm that maintains the constraint, we currently restrict to $W=1$.
        Then we may as well let $v=0$, since $\exp(2\pi i v_p (dn)_p) = 1$ for integer $v$ and $dn$.

    Parameters
    ----------
    lattice: supervillain.lattice.Lattice2D
        The lattice on which $\phi$ and $n$ live.
    kappa: float
        The $\kappa$ in the overall coefficient.
    W: int
        The constraint integer $W$.  For the Villain action we restrict to $W=1$ to avoid a horrible sign problem.
    '''

    def __init__(self, lattice, kappa, W=1):

        self.Lattice = lattice
        self.kappa = kappa
        self.W = W

        if self.W != 1:
            raise ValueError(f'The Villain action has a horrible sign problem when W≠1; you picked {W=}.')

    def __str__(self):
        return f'Villain({self.Lattice}, κ={self.kappa}, W={self.W})'

    def __call__(self, phi, n, **kwargs):
        r'''
        Parameters
        ----------
        phi: np.ndarray
            A real-valued 0-form.
        n: np.ndarray
            An integer-valued 1-form.

        Returns
        -------
        float
            $S_0[\phi, n, v=0]$.  We restrict to the $v=0$ simplification because we restrict to $W=1$.
        '''
        return self.kappa / 2 * np.sum((self.Lattice.d(0, phi) - 2*np.pi*n)**2) # + nothing that depends on v since W=1.

    def configurations(self, count):
        r'''
        Parameters
        ----------
        count: int

        Returns
        -------
        dict
            A dictionary of zeroed arrays at keys ``phi`` and ``n``, holding ``count`` 0- and 1-forms respectively.
        '''
        return Configurations({
            'phi': self.Lattice.form(0, count),
            'n':   self.Lattice.form(1, count, dtype=int),
            'v':   self.Lattice.form(2, count, dtype=int),
            })

    def gauge_transform(self, configuration, k):
        r'''
        The Villain formulation has the gauge symmetry 

        .. math::
           \phi &\rightarrow\; \phi + 2\pi k
           \\
           n &\rightarrow\; n + dk

        with the gauge-invariant combination $(d\phi - 2\pi n)$.

        Parameters
        ----------
        configuration: dict
            A dictionary with the fields.
        k: np.array
            The gauge transformation parameter $k$ which must be of integer dtype.

        Returns
        -------
        dict:
            A dictionary with the fields transformed by $k$.
        '''

        if not issubclass(k.dtype.type, np.integer):
            raise ValueError('The gauge transformation is generated by integer k; it must be of integer dtype.')

        return {
            'phi': configuration['phi'] + 2*np.pi*k,
            'n':   configuration['n']   + self.Lattice.d(0, k),
        }

class Worldline(H5able):
    r'''
    The dual (worldline) action is

    .. math::
       \begin{align}
       Z[J] &= \sum Dm\; Dv\; e^{-S_J[m, v]} \left[\delta m = 0\right]
       \\
       S_J[m, v] &= \frac{1}{2\kappa} \sum_\ell \left(m - \delta\left(\frac{v}{W} + \frac{J}{2\pi} \right)\right)_\ell^2 + \frac{|\ell|}{2} \ln (2\pi \kappa) - |x| \ln 2\pi
       \end{align}

    In other words, it is a sum over all configurations where $\delta m$ vanishes on every site.

    This formulation has no obvious sign problem when $W\neq 1$, but maintaining the constraint $\delta m = 0$ requires a nontrivial algorithm.

    Parameters
    ----------
    lattice: supervillain.Lattice2D
        The lattice on which $m$ lives.
    kappa: float
        The $\kappa$ in the overall coefficient.
    W: int
        The winding symmetry is $\mathbb{Z}_W$.  If $W=1$ the vortices are completely unconstrained.


    '''

    def __init__(self, lattice, kappa, W=1):

        self.Lattice = lattice
        self.kappa = kappa
        self.W = W
        self._constant_offset = self.Lattice.links / 2 * np.log(2*np.pi*kappa) - self.Lattice.sites * np.log(2*np.pi)

    def __str__(self):
        return f'Worldline({self.Lattice}, κ={self.kappa}, W={self.W})'

    def valid(self, m):
        r'''
        Returns true if the constraint $[\delta m = 0]$ is satisfied everywhere and false otherwise.
        '''

        return (self.Lattice.delta(1, m) == 0).all()

    def __call__(self, m, v, **kwargs):
        r'''
        Parameters
        ----------
        m: np.ndarray
            An integer-valued 1-form.
        v: np.ndarray
            An integer-valued 2-form.

        Returns
        -------
        float:
            $S_0[m]$

        Raises
        ------
        ValueError
            If $m$ does not satisfy the constraint.
        '''

        if not self.valid(m):
            raise ValueError(f'The one-form m does not satisfy the constraint δm = 0 everywhere.')
        return 0.5 / self.kappa * np.sum((m - self.Lattice.delta(2, v) / self.W)**2) + self._constant_offset

    def configurations(self, count):
        r'''
        Parameters
        ----------
        count: int
            How many configurations to return.

        Returns
        -------
        Configurations
            ``count`` configurations of a zeroed 1-form ``m`` a zeroed 2-form ``v``.
        '''

        return Configurations({
            'm': self.Lattice.form(1, count, dtype=int),
            'v': self.Lattice.form(2, count, dtype=int),
            })
